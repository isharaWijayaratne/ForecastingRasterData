Ra <- Ra_MJ*0.408
print(Ra)
temp_pr <- 0.0023*(tasavg_rcp45 + 17)*(((tasmax_rcp45 - tasmin_rcp45) - (0.0123*pr_rcp45))^0.76)
Mod_ET_0 <- Ra * temp_pr
print(Mod_ET_0)
library(terra)
# Assuming ET_0 is your SpatRaster
# Define the output directory for TIFF files
output_directory <- "C:/Users/i.wijayarathne/OneDrive - CGIAR/Desktop/Project1/Project1/Extra/"
# Loop through each layer and write it as a separate TIFF file
for (i in seq_len(nlyr(Mod_ET_0))) {
# Generate the filename for the current layer
output_tif_file <- paste0(output_directory, "Double_ET0_layer_", i, ".tif")
# Write the current layer to the TIFF file
writeRaster(Mod_ET_0[[i]], filename = output_tif_file, overwrite = TRUE)
}
knitr::opts_chunk$set(echo = TRUE)
library(terra)
library(dplyr) #facilitates the use of %>% operator
library(tidyverse)
library(ggplot2)
pr_rcp45 <- terra::rast("C:/Users/i.wijayarathne/OneDrive - CGIAR/Desktop/Project1/Project1/Test_data/rcm_outputs/rcp45/pr/2030/ENSEMBLE_MEAN/pr_EUR-11_ENSEMBLE-MEAN_historical_rcp45_2020-2039.nc")
pr_rcp45
p1 <- pr_rcp45[[1]]
plot(p1)
#summary(values(pr_rcp45)) - can obtain a summary of all the values in the layers
#values(pr_rcp45) - This is an array
tasmax_rcp45 <- terra::rast("C:/Users/i.wijayarathne/OneDrive - CGIAR/Desktop/Project1/Project1/Test_data/rcm_outputs/rcp45/tasmax/2030/ENSEMBLE_MEAN/tasmax_EUR-11_ENSEMBLE-MEAN_historical_rcp45_2020-2039.nc")
tasmax_rcp45
tasmin_rcp45 <- terra::rast("C:/Users/i.wijayarathne/OneDrive - CGIAR/Desktop/Project1/Project1/Test_data/rcm_outputs/rcp45/tasmin/2030/ENSEMBLE_MEAN/tasmin_EUR-11_ENSEMBLE-MEAN_historical_rcp45_2020-2039.nc")
tasmin_rcp45
tasavg_rcp45 <- (tasmax_rcp45 + tasmin_rcp45)/2
tasavg_rcp45
time <- time(tasmin_rcp45) # Type = "Date"
#class(time)
head(time,50) #View the first 50 values of the variable "time"
# Calculate the number of days since the start of the current year:
prior_year <- year(time)-1
head(prior_year,10) #View the first 10 values of the variable "prior_year"
tail(prior_year,10) #View the last 10 values of the variable "prior_year"
end.of.prior_year <- as.Date(paste0(prior_year, "-12-31"))
head(end.of.prior_year,10)
tail(end.of.prior_year,10) #View the last 10 values of the variable "end.of.prior_year"
Julian_days <- time - end.of.prior_year #In the variable "Julian days" leap years are accounted for
Julian_days <- as.vector(Julian_days) #Convert into a vector
Julian_days
# Get the cell numbers
cell_no <- 1:ncell(tasmin_rcp45) #row-wise fashion
head(cell_no,15)
tail(cell_no,5) #31*31 = 961
# Get the latitudes corresponding to the cell numbers
lat <- yFromCell(tasmin_rcp45, cell_no)
lat <- as.vector(lat)
# Print first 50 values
head(lat,50)
knitr::include_graphics("Spatraster_image.PNG")
# Get the longitudes corresponding to the cell numbers
lon <- xFromCell(tasmin_rcp45, cell_no)
lon <- as.vector(lon)
# Print first 50 values:
head(lon,50) #Repetition of the 31 values can be observed
Gsc <- 0.082 ; Gsc
jd <- Julian_days ; head(jd,5) #vector
Lat_rad <- (pi/180)*lat
# Decide on the size of the square matrix
matrix_size <- floor(sqrt(length(Lat_rad)))
# Create the square matrix
Lat_rad <- matrix(Lat_rad, nrow = matrix_size, ncol = matrix_size, byrow = TRUE )
head(Lat_rad,3)
dr <- 1 + 0.033*cos(2*(pi/365)*jd) ; head(dr,5) #vector
d <- 0.409*sin( (2*(pi/365)*jd) - 1.39 ) ; head(d,5) #vector
# Define an empty array ws
ws <- array(dim = c(nrow(Lat_rad), ncol(Lat_rad), length(d)))
# Loop through each value in vector d
for (i in seq_along(d)) {
WS <- acos(-tan(Lat_rad) * tan(d[i]))
# Store the result in the ws array
ws[, , i] <- WS
}
# Print the first 5 elements of ws
#head(ws, 5)
step1 <- ((24*60)/pi)*Gsc*dr
# For Step 2 first obtain ws*sin(d)
# Create an empty array k1 with the same dimensions as ws
k1 <- array(dim = dim(ws))
# Loop through each layer of ws
for (i in seq_along(d)) {
# Multiply the i-th layer of ws by the i-th element of sin(d)
k1[, , i] <- ws[, , i] * sin(d[i])
}
# Next for Step 2 obtain k1*sin(Lat_rad)
#k1 is an array, Lat_rad is a matrix with the same number of columns and rows as k1.
# [i,j] in each layer of k1 must be multiplies by the corresponding sin(Lat_rad)[i,j]
step2 <- array(dim = dim(k1)) #Create an empty array step2 with the same dimensions as k1
for (k in seq_along(d)) {
for (i in seq_len(nrow(k1))) {
for (j in seq_len(ncol(k1))) {
step2[i, j, k] <- k1[i, j, k] * sin(Lat_rad[i, j])
}
}
}
# Print the first 2 elements of step2
head(step2, 2)
# For step 3 first obtain sin(ws)*cos(d)
# Create an empty array k2 with the same dimensions as ws
k2 <- array(dim = dim(ws))
# Loop through each layer of ws
for (i in seq_along(d)) {
# Multiply the i-th layer of ws by the i-th element of cos(d)
k2[, , i] <- sin(ws[, , i]) * cos(d[i])
}
# Next for Step 3 obtain k2*cos(Lat_rad)
#k2 is an array, Lat_rad is a matrix with the same number of columns and rows as k2.
# [i,j] in each layer of k2 must be multiplies by the corresponding cos(Lat_rad)[i,j]
step3 <- array(dim = dim(k2)) #Create an empty array step3 with the same dimensions as k2
for (k in seq_along(d)) {
for (i in seq_len(nrow(k2))) {
for (j in seq_len(ncol(k2))) {
step3[i, j, k] <- k2[i, j, k] * cos(Lat_rad[i, j])
}
}
}
# Print the first 2 elements of step3
#head(step3, 2)
int_step <- (step2 + step3)
# Create an empty array Ra_MJ with the same dimensions as int_step
Ra_MJ <- array(dim = dim(int_step))
# Loop through each layer of int_step
for (i in seq_along(step1)) {
# Multiply the i-th layer of int_step by the i-th element of step1
Ra_MJ[, , i] <- step1[i]*int_step[, , i]
}
Ra <- Ra_MJ*0.408
head(Ra,1)
temp_pr <- 0.0013*(tasavg_rcp45 + 17)*(((tasmax_rcp45 - tasmin_rcp45) - (0.0123*pr_rcp45))^0.76)
# Get dimensions of tasmin_rcp45
dims <- c(ncol(tasmin_rcp45), nrow(tasmin_rcp45),  nlyr(tasmin_rcp45))
# Create an empty SpatRaster with the same dimensions as tasmin_rcp45
Ra_spatraster <- rast(
ncol = dims[1],
nrow = dims[2],
nlyr = dims[3],
xmin = ext(tasmin_rcp45)[1],
xmax = ext(tasmin_rcp45)[2],
ymin = ext(tasmin_rcp45)[3],
ymax = ext(tasmin_rcp45)[4],
crs = crs(tasmin_rcp45)
)
# Fill the empty SpatRaster with elements from Ra
values(Ra_spatraster) <- Ra # Now Ra_spatraster is filled with the values from the Ra array
ET_0 <- Ra_spatraster * temp_pr ; ET_0
summary(ET_0)
PET_rcp45 <- terra::rast("C:/Users/i.wijayarathne/OneDrive - CGIAR/Desktop/Project1/Project1/Test_data/PET/cordex_era/rcp45/2030/eto_EUR-11_ENSEMBLE-MEAN_rcp45_2020-2039_MONMEAN.nc")
PET_rcp45
values(tasmax_rcp45)
tasmax_rcp45[1,5,5]
tasmax_rcp45[30,30,30]
tasmin_rcp45[30,30,30]
pr_rcp45[30,30,30]
Lat_spatraster[30,30,1]
knitr::opts_chunk$set(echo = TRUE)
library(terra)
library(dplyr) #facilitates the use of %>% operator
library(tidyverse)
library(ggplot2)
pr_rcp45 <- terra::rast("C:/Users/i.wijayarathne/OneDrive - CGIAR/Desktop/Project1/Project1/Test_data/rcm_outputs/rcp45/pr/2030/ENSEMBLE_MEAN/pr_EUR-11_ENSEMBLE-MEAN_historical_rcp45_2020-2039.nc")
pr_rcp45
p1 <- pr_rcp45[[1]]
plot(p1)
#summary(values(pr_rcp45)) - can obtain a summary of all the values in the layers
#values(pr_rcp45) - This is an array
tasmax_rcp45 <- terra::rast("C:/Users/i.wijayarathne/OneDrive - CGIAR/Desktop/Project1/Project1/Test_data/rcm_outputs/rcp45/tasmax/2030/ENSEMBLE_MEAN/tasmax_EUR-11_ENSEMBLE-MEAN_historical_rcp45_2020-2039.nc")
tasmax_rcp45
tasmin_rcp45 <- terra::rast("C:/Users/i.wijayarathne/OneDrive - CGIAR/Desktop/Project1/Project1/Test_data/rcm_outputs/rcp45/tasmin/2030/ENSEMBLE_MEAN/tasmin_EUR-11_ENSEMBLE-MEAN_historical_rcp45_2020-2039.nc")
tasmin_rcp45
tasavg_rcp45 <- (tasmax_rcp45 + tasmin_rcp45)/2
tasavg_rcp45
time <- time(tasmin_rcp45) # Type = "Date"
#class(time)
head(time,50) #View the first 50 values of the variable "time"
# Calculate the number of days since the start of the current year:
prior_year <- year(time)-1
head(prior_year,10) #View the first 10 values of the variable "prior_year"
tail(prior_year,10) #View the last 10 values of the variable "prior_year"
end.of.prior_year <- as.Date(paste0(prior_year, "-12-31"))
head(end.of.prior_year,10)
tail(end.of.prior_year,10) #View the last 10 values of the variable "end.of.prior_year"
Julian_days <- time - end.of.prior_year #In the variable "Julian days" leap years are accounted for
Julian_days <- as.vector(Julian_days) #Convert into a vector
Julian_days
# Get the cell numbers
cell_no <- 1:ncell(tasmin_rcp45) #row-wise fashion
head(cell_no,15)
tail(cell_no,5) #31*31 = 961
# Get the latitudes corresponding to the cell numbers
lat <- yFromCell(tasmin_rcp45, cell_no)
lat <- as.vector(lat)
# Print first 50 values
head(lat,50)
knitr::include_graphics("Spatraster_image.PNG")
# Get the longitudes corresponding to the cell numbers
lon <- xFromCell(tasmin_rcp45, cell_no)
lon <- as.vector(lon)
# Print first 50 values:
head(lon,50) #Repetition of the 31 values can be observed
Gsc <- 0.082 ; Gsc
jd <- Julian_days ; head(jd,5) #vector
knitr::opts_chunk$set(echo = TRUE)
library(terra)
library(dplyr) #facilitates the use of %>% operator
library(tidyverse)
library(ggplot2)
pr_rcp45 <- terra::rast("C:/Users/i.wijayarathne/OneDrive - CGIAR/Desktop/Project1/Project1/Test_data/rcm_outputs/rcp45/pr/2030/ENSEMBLE_MEAN/pr_EUR-11_ENSEMBLE-MEAN_historical_rcp45_2020-2039.nc")
pr_rcp45
p1 <- pr_rcp45[[1]]
plot(p1)
#summary(values(pr_rcp45)) - can obtain a summary of all the values in the layers
#values(pr_rcp45) - This is an array
tasmax_rcp45 <- terra::rast("C:/Users/i.wijayarathne/OneDrive - CGIAR/Desktop/Project1/Project1/Test_data/rcm_outputs/rcp45/tasmax/2030/ENSEMBLE_MEAN/tasmax_EUR-11_ENSEMBLE-MEAN_historical_rcp45_2020-2039.nc")
tasmax_rcp45
tasmin_rcp45 <- terra::rast("C:/Users/i.wijayarathne/OneDrive - CGIAR/Desktop/Project1/Project1/Test_data/rcm_outputs/rcp45/tasmin/2030/ENSEMBLE_MEAN/tasmin_EUR-11_ENSEMBLE-MEAN_historical_rcp45_2020-2039.nc")
tasmin_rcp45
tasavg_rcp45 <- (tasmax_rcp45 + tasmin_rcp45)/2
tasavg_rcp45
time <- time(tasmin_rcp45) # Type = "Date"
#class(time)
head(time,50) #View the first 50 values of the variable "time"
# Calculate the number of days since the start of the current year:
prior_year <- year(time)-1
head(prior_year,10) #View the first 10 values of the variable "prior_year"
tail(prior_year,10) #View the last 10 values of the variable "prior_year"
end.of.prior_year <- as.Date(paste0(prior_year, "-12-31"))
head(end.of.prior_year,10)
tail(end.of.prior_year,10) #View the last 10 values of the variable "end.of.prior_year"
Julian_days <- time - end.of.prior_year #In the variable "Julian days" leap years are accounted for
Julian_days <- as.vector(Julian_days) #Convert into a vector
Julian_days
# Get the cell numbers
cell_no <- 1:ncell(tasmin_rcp45) #row-wise fashion
head(cell_no,15)
tail(cell_no,5) #31*31 = 961
# Get the latitudes corresponding to the cell numbers
lat <- yFromCell(tasmin_rcp45, cell_no)
lat <- as.vector(lat)
# Print first 50 values
head(lat,50)
knitr::include_graphics("Spatraster_image.PNG")
# Get the longitudes corresponding to the cell numbers
lon <- xFromCell(tasmin_rcp45, cell_no)
lon <- as.vector(lon)
# Print first 50 values:
head(lon,50) #Repetition of the 31 values can be observed
lat
30*30
knitr::opts_chunk$set(echo = TRUE)
library(terra)
library(dplyr) #facilitates the use of %>% operator
library(tidyverse)
library(ggplot2)
pr_rcp45 <- terra::rast("C:/Users/i.wijayarathne/OneDrive - CGIAR/Desktop/Project1/Project1/Test_data/rcm_outputs/rcp45/pr/2030/ENSEMBLE_MEAN/pr_EUR-11_ENSEMBLE-MEAN_historical_rcp45_2020-2039.nc")
pr_rcp45
p1 <- pr_rcp45[[1]]
plot(p1)
#summary(values(pr_rcp45)) - can obtain a summary of all the values in the layers
#values(pr_rcp45) - This is an array
tasmax_rcp45 <- terra::rast("C:/Users/i.wijayarathne/OneDrive - CGIAR/Desktop/Project1/Project1/Test_data/rcm_outputs/rcp45/tasmax/2030/ENSEMBLE_MEAN/tasmax_EUR-11_ENSEMBLE-MEAN_historical_rcp45_2020-2039.nc")
tasmax_rcp45
tasmin_rcp45 <- terra::rast("C:/Users/i.wijayarathne/OneDrive - CGIAR/Desktop/Project1/Project1/Test_data/rcm_outputs/rcp45/tasmin/2030/ENSEMBLE_MEAN/tasmin_EUR-11_ENSEMBLE-MEAN_historical_rcp45_2020-2039.nc")
tasmin_rcp45
tasavg_rcp45 <- (tasmax_rcp45 + tasmin_rcp45)/2
tasavg_rcp45
time <- time(tasmin_rcp45) # Type = "Date"
#class(time)
head(time,50) #View the first 50 values of the variable "time"
# Calculate the number of days since the start of the current year:
prior_year <- year(time)-1
head(prior_year,10) #View the first 10 values of the variable "prior_year"
tail(prior_year,10) #View the last 10 values of the variable "prior_year"
end.of.prior_year <- as.Date(paste0(prior_year, "-12-31"))
head(end.of.prior_year,10)
tail(end.of.prior_year,10) #View the last 10 values of the variable "end.of.prior_year"
Julian_days <- time - end.of.prior_year #In the variable "Julian days" leap years are accounted for
Julian_days <- as.vector(Julian_days) #Convert into a vector
Julian_days
# Get the cell numbers
cell_no <- 1:ncell(tasmin_rcp45) #row-wise fashion
head(cell_no,15)
tail(cell_no,5) #31*31 = 961
# Get the latitudes corresponding to the cell numbers
lat <- yFromCell(tasmin_rcp45, cell_no)
lat <- as.vector(lat)
# Print first 50 values
head(lat,50)
knitr::include_graphics("Spatraster_image.PNG")
# Get the longitudes corresponding to the cell numbers
lon <- xFromCell(tasmin_rcp45, cell_no)
lon <- as.vector(lon)
# Print first 50 values:
head(lon,50) #Repetition of the 31 values can be observed
Gsc <- 0.082 ; Gsc
jd <- Julian_days ; head(jd,5) #vector
Lat_rad <- (pi/180)*lat
# Get dimensions of tasmin_rcp45
dims <- c(ncol(tasmin_rcp45), nrow(tasmin_rcp45),  1)
# Create an empty SpatRaster with the same dimensions as tasmin_rcp45
Lat_spatraster <- rast(
ncol = dims[1],
nrow = dims[2],
nlyr = dims[3],
xmin = ext(tasmin_rcp45)[1],
xmax = ext(tasmin_rcp45)[2],
ymin = ext(tasmin_rcp45)[3],
ymax = ext(tasmin_rcp45)[4],
crs = crs(tasmin_rcp45)
)
# Fill the empty SpatRaster with elements from Lat_rad
values(Lat_spatraster) <- Lat_rad
print(Lat_spatraster)
#Lat_spatraster[1, 1, 1] - can obtain the row, col, layer value.
Lat_spatraster[30,30,30]
Lat_spatraster[30,30,1]
knitr::opts_chunk$set(echo = TRUE)
library(terra)
library(dplyr) #facilitates the use of %>% operator
library(tidyverse)
library(ggplot2)
pr_rcp45 <- terra::rast("C:/Users/i.wijayarathne/OneDrive - CGIAR/Desktop/Project1/Project1/Test_data/rcm_outputs/rcp45/pr/2030/ENSEMBLE_MEAN/pr_EUR-11_ENSEMBLE-MEAN_historical_rcp45_2020-2039.nc")
pr_rcp45
p1 <- pr_rcp45[[1]]
plot(p1)
#summary(values(pr_rcp45)) - can obtain a summary of all the values in the layers
#values(pr_rcp45) - This is an array
tasmax_rcp45 <- terra::rast("C:/Users/i.wijayarathne/OneDrive - CGIAR/Desktop/Project1/Project1/Test_data/rcm_outputs/rcp45/tasmax/2030/ENSEMBLE_MEAN/tasmax_EUR-11_ENSEMBLE-MEAN_historical_rcp45_2020-2039.nc")
tasmax_rcp45
tasmin_rcp45 <- terra::rast("C:/Users/i.wijayarathne/OneDrive - CGIAR/Desktop/Project1/Project1/Test_data/rcm_outputs/rcp45/tasmin/2030/ENSEMBLE_MEAN/tasmin_EUR-11_ENSEMBLE-MEAN_historical_rcp45_2020-2039.nc")
tasmin_rcp45
tasavg_rcp45 <- (tasmax_rcp45 + tasmin_rcp45)/2
tasavg_rcp45
time <- time(tasmin_rcp45) # Type = "Date"
#class(time)
head(time,50) #View the first 50 values of the variable "time"
# Calculate the number of days since the start of the current year:
prior_year <- year(time)-1
head(prior_year,10) #View the first 10 values of the variable "prior_year"
tail(prior_year,10) #View the last 10 values of the variable "prior_year"
end.of.prior_year <- as.Date(paste0(prior_year, "-12-31"))
head(end.of.prior_year,10)
tail(end.of.prior_year,10) #View the last 10 values of the variable "end.of.prior_year"
Julian_days <- time - end.of.prior_year #In the variable "Julian days" leap years are accounted for
Julian_days <- as.vector(Julian_days) #Convert into a vector
Julian_days
# Get the cell numbers
cell_no <- 1:ncell(tasmin_rcp45) #row-wise fashion
head(cell_no,15)
tail(cell_no,5) #31*31 = 961
# Get the latitudes corresponding to the cell numbers
lat <- yFromCell(tasmin_rcp45, cell_no)
lat <- as.vector(lat)
# Print first 50 values
head(lat,50)
knitr::include_graphics("Spatraster_image.PNG")
# Get the longitudes corresponding to the cell numbers
lon <- xFromCell(tasmin_rcp45, cell_no)
lon <- as.vector(lon)
# Print first 50 values:
head(lon,50) #Repetition of the 31 values can be observed
Gsc <- 0.082 ; Gsc
jd <- Julian_days ; head(jd,5) #vector
Lat_rad <- (pi/180)*lat
# Get dimensions of tasmin_rcp45
dims <- c(ncol(tasmin_rcp45), nrow(tasmin_rcp45),  1)
# Create an empty SpatRaster with the same dimensions as tasmin_rcp45
Lat_spatraster <- rast(
ncol = dims[1],
nrow = dims[2],
nlyr = dims[3],
xmin = ext(tasmin_rcp45)[1],
xmax = ext(tasmin_rcp45)[2],
ymin = ext(tasmin_rcp45)[3],
ymax = ext(tasmin_rcp45)[4],
crs = crs(tasmin_rcp45)
)
# Fill the empty SpatRaster with elements from Lat_rad
values(Lat_spatraster) <- Lat_rad
print(Lat_spatraster)
#Lat_spatraster[1, 1, 1] - can obtain the row, col, layer value.
dr <- 1 + 0.033*cos(2*(pi/365)*jd) ; head(dr,5) #vector
d <- 0.409*sin( (2*(pi/365)*jd) - 1.39 ) ; head(d,5) #vector
dims <- c(ncol(tasmin_rcp45), nrow(tasmin_rcp45),  length(d))
# Create an empty SpatRaster with the same extent and resolution
ws_spatraster <- rast(
ncol = dims[1],
nrow = dims[2],
nlyr = dims[3],
xmin = ext(tasmin_rcp45)[1],
xmax = ext(tasmin_rcp45)[2],
ymin = ext(tasmin_rcp45)[3],
ymax = ext(tasmin_rcp45)[4],
crs = crs(tasmin_rcp45)
)
# Loop through each value in vector d
for (i in seq_along(d)) {
WS <- acos(-tan(Lat_spatraster) * tan(d[i]))
# Assign the result to the corresponding layer
ws_spatraster[[i]] <- WS
# Set layer names based on i
names(ws_spatraster)[i] <- paste("lyr", i, sep = ".")
}
# Print the created SpatRaster
print(ws_spatraster)
step1 <- ((24*60)/pi)*Gsc*dr
dims <- c(ncol(tasmin_rcp45), nrow(tasmin_rcp45),  length(d))
# Create an empty SpatRaster with the same extent and resolution
k1_spatraster <- rast(
ncol = dims[1],
nrow = dims[2],
nlyr = dims[3],
xmin = ext(tasmin_rcp45)[1],
xmax = ext(tasmin_rcp45)[2],
ymin = ext(tasmin_rcp45)[3],
ymax = ext(tasmin_rcp45)[4],
crs = crs(tasmin_rcp45)
)
for (i in seq_along(d)) {
# Multiply the i-th layer of k1_spatraster by the i-th element of sin(d)
k1_spatraster[[i]] <- ws_spatraster[[i]] * sin(d[i])
# Set layer names based on i
names(k1_spatraster)[i] <- paste("lyr", i, sep = ".")
}
# Print the created SpatRaster k1_spatraster
print(k1_spatraster)
dims <- c(ncol(tasmin_rcp45), nrow(tasmin_rcp45),  length(d))
# Create an empty SpatRaster with the same extent and resolution
step2_spatraster <- rast(
ncol = dims[1],
nrow = dims[2],
nlyr = dims[3],
xmin = ext(tasmin_rcp45)[1],
xmax = ext(tasmin_rcp45)[2],
ymin = ext(tasmin_rcp45)[3],
ymax = ext(tasmin_rcp45)[4],
crs = crs(tasmin_rcp45)
)
# Step 2: Loop through each layer of k1_spatraster and multiply by sin(Lat_spatraster)
for (k in seq_len(nlyr(k1_spatraster))) {
k1_layer <- k1_spatraster[[k]]
Lat_layer <- Lat_spatraster[[1]]
# Multiply each element by sin(Lat_spatraster)
step2_layer <- k1_layer * sin(Lat_layer)
# Assign the result to the corresponding layer
step2_spatraster[[k]] <- step2_layer
# Set layer names based on k
names(step2_spatraster)[k] <- paste("lyr", k, sep = ".")
}
# Print the created SpatRaster step2_spatraster
print(step2_spatraster)
dims <- c(ncol(tasmin_rcp45), nrow(tasmin_rcp45),  length(d))
# Create an empty SpatRaster with the same extent and resolution
k2_spatraster <- rast(
ncol = dims[1],
nrow = dims[2],
nlyr = dims[3],
xmin = ext(tasmin_rcp45)[1],
xmax = ext(tasmin_rcp45)[2],
ymin = ext(tasmin_rcp45)[3],
ymax = ext(tasmin_rcp45)[4],
crs = crs(tasmin_rcp45)
)
for (i in seq_along(d)) {
# Multiply the i-th layer of k2_spatraster by the i-th element of cos(d)
k2_spatraster[[i]] <- sin(ws_spatraster[[i]]) * cos(d[i])
# Set layer names based on i
names(k2_spatraster)[i] <- paste("lyr", i, sep = ".")
}
# Print the created k2_spatraster
print(k2_spatraster)
dims <- c(ncol(tasmin_rcp45), nrow(tasmin_rcp45),  length(d))
# Create an empty SpatRaster with the same extent and resolution
step3_spatraster <- rast(
ncol = dims[1],
nrow = dims[2],
nlyr = dims[3],
xmin = ext(tasmin_rcp45)[1],
xmax = ext(tasmin_rcp45)[2],
ymin = ext(tasmin_rcp45)[3],
ymax = ext(tasmin_rcp45)[4],
crs = crs(tasmin_rcp45)
)
# Step 2: Loop through each layer of k2_spatraster and multiply by cos(Lat_spatraster)
for (k in seq_len(nlyr(k2_spatraster))) {
k2_layer <- k2_spatraster[[k]]
Lat_layer <- Lat_spatraster[[1]]  # Lat_spatraster is a single layer SpatRaster
# Multiply each element by cos(Lat_spatraster)
step3_layer <- k2_layer * cos(Lat_layer)
# Assign the result to the corresponding layer
step3_spatraster[[k]] <- step3_layer
# Set layer names based on k
names(step3_spatraster)[k] <- paste("lyr", k, sep = ".")
}
# Print the created step3_spatraster
print(step3_spatraster)
int_step <- (step2_spatraster + step3_spatraster)
Ra_MJ <- step1*int_step
print(Ra_MJ)
Ra <- Ra_MJ*0.408
print(Ra)
temp_pr <- 0.0013*(tasavg_rcp45 + 17)*(((tasmax_rcp45 - tasmin_rcp45) - (0.0123*pr_rcp45))^0.76)
Mod_ET_0 <- Ra * temp_pr
print(Mod_ET_0)
Mod_ET_0[30,30,30]
AET = pr_rcp45*(1 + (Mod_ET_0/pr_rcp45) - (1 + (Mod_ET_0/pr_rcp45)^1.8)^{1/1.8})
print(AET)
